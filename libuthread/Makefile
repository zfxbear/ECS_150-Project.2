# Reference: 
# - Makefile tutorial: Discussion Slides Professor JP provided
# - How to archive a static libraray:
#		https://tldp.org/HOWTO/Program-Library-HOWTO/static-libraries.html

# Customized variables (lowercases)
targets := libuthread.a # final taget is a archive file
objs := context.o preempt.o queue.o sem.o uthread.o # object files in alphabetic order

# Variable for gcc
CC := gcc
CFLAGS := -Wall -Wextra -Werror -MMD
ARCHIVE := ar rcs

# Verbose print: if run "make V=1", would print commands after $(Q)
ifneq ($(V), 1)
Q = @
endif

# Debug mode 
ifneq ($(D),1)
CFLAGS	+= -O2
else
CFLAGS	+= -g
endif

# Root rule: generate targets
all: $(targets)

# Dependency files generated by -MMD
# -MMD would automatically generate a .d dependency file for each .o file
# e.g cat main.o
#     main.o: main.c fact.h
deps := $(patsubst %.o, %.d, $(objs)) 
-include $(deps)

# Rule for generating $(targets), in this case libuthread.a
$(targets): $(objs)
	@echo "ARCHIVE $@"
	$(Q) $(ARCHIVE) $@ $^

# Rule for compling each .c file to corresponding .o file
%.o: %.c
	@echo "CC $@"
	$(Q) $(CC) $(CFLAGS) -c -o $@ $<

# Rule for "make clean"
clean:
	@echo "clean"
	$(Q) rm -f $(targets) $(objs) $(deps)

# Appendix:
# Reference of the symbols for readability of Makefile
# $@: target name
# $<: first dependency
# $^: all prerequisites
# % .o: %.c: percentage is a pattern match
# Note: All rules must be indented by "tab" (not spaces)
